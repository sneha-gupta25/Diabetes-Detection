# -*- coding: utf-8 -*-
"""DA_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m_l2PnHJBax4hgAJowKxRwTxgah6MUtR

##Imports
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

"""##Diabetes Dataset"""

file_path1 = "13pV5aLUUdeJ_BtluVIRzSXGAKikbXh_o"
url1 = f"https://drive.google.com/uc?export=download&id={file_path1}"
data1 = pd.read_csv(url1)
print(data1)

X = data1[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']]
y = data1['Outcome']

# Standardize the features
scaler = StandardScaler()
scaler.fit(X)
standarized_data = scaler.transform(X)
X = standarized_data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""##Naive Bayes on Diabetes Dataset



"""

gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred_train = gnb.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = gnb.predict(X_test)
accuracy_nb1 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_nb1}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##SVM on Diabetes Dataset




"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, y_train)
y_pred_train = classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = classifier.predict(X_test)
accuracy_svm1 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_svm1}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##Decision Tree on Diabetes Dataset"""

tree_classifier = DecisionTreeClassifier(max_depth=2, criterion='entropy')
tree_classifier.fit(X_train, y_train)
y_pred_train = tree_classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = tree_classifier.predict(X_test)
accuracy_dt1 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_dt1}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""## KNN on Diabetes Dataset"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_train = knn.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = knn.predict(X_test)
accuracy_knn1 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_knn1}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""# Random Forest on Diabetes Dataset"""

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(
    n_estimators=100,  # Use more trees
    max_depth=100,  # Decrease max depth
    min_samples_split=20,  # Increase min samples split
    min_samples_leaf=1,
    max_features='sqrt',
    random_state=5
)

# Fit the classifier and make predictions
clf.fit(X_train, y_train)
y_pred_test = clf.predict(X_test)

accuracy_rf1 = accuracy_score(y_test, y_pred_test)
# Print the accuracy score
print(f"Accuracy: {accuracy_rf1}")

# Print the accuracy score on the training set
y_pred_train = clf.predict(X_train)
print(f"Training Accuracy: {accuracy_score(y_train, y_pred_train)}")
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##Bar Graph of Accuracy vs Classification Model of Diabetes Dataset"""

models = ["kNN", "SVM", "Naive Bayes", "Random Forest", "Decision Tree"]
accuracies = [accuracy_knn1, accuracy_svm1, accuracy_nb1, accuracy_rf1, accuracy_dt1]

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(models, accuracies, color='skyblue', edgecolor='black')
plt.xlabel("Classification Models")
plt.ylabel("Accuracy")
plt.title("Comparative Analysis of Classification Models of DataSet1")
plt.ylim(0, 1)  # Set y-axis limits (adjust as needed)

# Add labels to each bar
for i, acc in enumerate(accuracies):
    plt.text(i, acc + 0.02, f"{acc:.3f}", ha='center', va='bottom')

plt.show()

"""## Diabetes Prediction Dataset

"""

file_path3 = "1WbaIkPYKzAaP_6_wB9tOkVL6OvFsetFY"
url3 = f"https://drive.google.com/uc?export=download&id={file_path3}"
data3 = pd.read_csv(url3)
print(data3)


# Create an instance of LabelEncoder
lab = LabelEncoder()

# Perform label encoding on the 'my_column' column
data3['gender'] = lab.fit_transform(data3['gender'])
data3['smoking_history'] = lab.fit_transform(data3['smoking_history'])

X = data3.drop(columns=['diabetes'],axis=1)
Y = data3['diabetes']
# Standardize the features
scaler = StandardScaler()
scaler.fit(X)
standarized_data = scaler.transform(X)
X = standarized_data

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)
print(data3)

"""## Naive Bayes on Diabetes Prediction Dataset



"""

gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred_train = gnb.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = gnb.predict(X_test)
accuracy_nb2 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_nb2}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""## SVM on Diabetes Prediction Dataset"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, y_train)
y_pred_train = classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = classifier.predict(X_test)
accuracy_svm2 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_svm2}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""## Decision Tree on Diabetes Prediction Dataset"""

tree_classifier = DecisionTreeClassifier(max_depth=2, criterion='entropy')
tree_classifier.fit(X_train, y_train)
y_pred_train = tree_classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = tree_classifier.predict(X_test)
accuracy_dt2 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_dt2}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""## KNN on Diabetes Prediction Dataset"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_train = knn.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = knn.predict(X_test)
accuracy_knn2 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_knn2}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""# Random Forest on Diabetes Prediction Dataset"""

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(
    n_estimators=100,  # Use more trees
    max_depth=None,  # Decrease max depth
    min_samples_split=2,  # Increase min samples split
    min_samples_leaf=1,
    max_features='sqrt',
    random_state=5
)

# Fit the classifier and make predictions
clf.fit(X_train, y_train)
y_pred_test = clf.predict(X_test)

accuracy_rf2=accuracy_score(y_test, y_pred_test)
# Print the accuracy score
print(f"Accuracy: {accuracy_rf2}")

# Print the accuracy score on the training set
y_pred_train = clf.predict(X_train)
print(f"Training Accuracy: {accuracy_score(y_train, y_pred_train)}")
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##Bar Graph of Accuracy vs Classification Model of Diabetes Prediction Dataset

"""

models = ["kNN", "SVM", "Naive Bayes", "Random Forest", "Decision Tree"]
accuracies = [accuracy_knn2, accuracy_svm2, accuracy_nb2, accuracy_rf2, accuracy_dt2]

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(models, accuracies, color='skyblue', edgecolor='black')
plt.xlabel("Classification Models")
plt.ylabel("Accuracy")
plt.title("Comparative Analysis of Classification Models of DataSet2")
plt.ylim(0, 1.1)  # Set y-axis limits (adjust as needed)

# Add labels to each bar
for i, acc in enumerate(accuracies):
    plt.text(i, acc + 0.02, f"{acc:.3f}", ha='center', va='bottom')

plt.show()

"""## Diabetes Health Indicators Dataset"""

file_path4 = "1rrFUSShewclzkPmfd7ZYW3EQyTzZWnLF"
url4 = f"https://drive.google.com/uc?export=download&id={file_path4}"
data4 = pd.read_csv(url4)
print(data4)

X = data4.drop(columns=['Diabetes_012'],axis=1)
Y = data4['Diabetes_012']

# Standardize the features
scaler = StandardScaler()
scaler.fit(X)
standarized_data = scaler.transform(X)
X = standarized_data

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)

"""##Naive Bayes on Diabetes Health Indicators Dataset"""

gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred_train = gnb.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = gnb.predict(X_test)
accuracy_nb3 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_nb3}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##SVM on Diabetes Health Indicators Dataset"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, y_train)
y_pred_train = classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = classifier.predict(X_test)
accuracy_svm3 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_svm3}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##Decision Tree on Diabetes Health Indicators Dataset"""

tree_classifier = DecisionTreeClassifier(max_depth=2, criterion='entropy')
tree_classifier.fit(X_train, y_train)
y_pred_train = tree_classifier.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = tree_classifier.predict(X_test)
accuracy_dt3 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_dt3}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##KNN on Diabetes Health Indicators Dataset"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_train = knn.predict(X_train)
accuracy1 = accuracy_score(y_train, y_pred_train)
print(f'Accuracy of the model during training: {accuracy1}')
y_pred_test = knn.predict(X_test)
accuracy_knn3 = accuracy_score(y_test, y_pred_test)
print(f'Accuracy of the model during testing: {accuracy_knn3}')
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""# Random Forest on Diabetes Health Indicators Dataset"""

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(
    n_estimators=100,  # Use more trees
    max_depth=None,  # Decrease max depth
    min_samples_split=2,  # Increase min samples split
    min_samples_leaf=1,
    max_features='sqrt',
    random_state=5
)

# Fit the classifier and make predictions
clf.fit(X_train, y_train)
y_pred_test = clf.predict(X_test)

accuracy_rf3=accuracy_score(y_test, y_pred_test)
# Print the accuracy score
print(f"Accuracy: {accuracy_rf3}")

# Print the accuracy score on the training set
y_pred_train = clf.predict(X_train)
print(f"Training Accuracy: {accuracy_score(y_train, y_pred_train)}")
conf_matrix = confusion_matrix(y_test, y_pred_test)
print(f"Confusion Matrix:\n{conf_matrix}")

"""##Bar Graph of Accuracy vs Classification Model of Diabetes Health Indicators Dataset"""

models = ["kNN", "SVM", "Naive Bayes", "Random Forest", "Decision Tree"]
accuracies = [accuracy_knn3, accuracy_svm3, accuracy_nb3, accuracy_rf3, accuracy_dt3]

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(models, accuracies, color='skyblue', edgecolor='black')
plt.xlabel("Classification Models")
plt.ylabel("Accuracy")
plt.title("Comparative Analysis of Classification Models of DataSet3")
plt.ylim(0, 1)  # Set y-axis limits (adjust as needed)

# Add labels to each bar
for i, acc in enumerate(accuracies):
    plt.text(i, acc + 0.02, f"{acc:.3f}", ha='center', va='bottom')

plt.show()

"""##Summarized"""

datasets = ["Diabetes Dataset", "Diabetes Prediction Dataset", "Diabetes Health Indicators Dataset"]
models = ["kNN", "SVM", "Naive Bayes", "Random Forest", "Decision Tree"]
accuracies_A = [accuracy_knn1, accuracy_svm1, accuracy_nb1, accuracy_rf1, accuracy_dt1]  # Accuracy scores for Dataset A
accuracies_B = [accuracy_knn2, accuracy_svm2, accuracy_nb2, accuracy_rf2, accuracy_dt2]  # Accuracy scores for Dataset B
accuracies_C = [accuracy_knn3, accuracy_svm3, accuracy_nb3, accuracy_rf3, accuracy_dt3]  # Accuracy scores for Dataset C

# Create a DataFrame with models as columns and datasets as rows
comparison_df = pd.DataFrame({
    "Model": models,
    datasets[0]: accuracies_A,
    datasets[1]: accuracies_B,
    datasets[2]: accuracies_C
})

# Print the final comparison table
print(comparison_df)

